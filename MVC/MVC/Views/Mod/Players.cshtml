@model List<Player>

<h2>Players</h2>

<form method="get" asp-action="Players">
    <input type="text" name="searchQuery" placeholder="Search by token or username" value="@ViewData["SearchQuery"]" />
    <button type="submit" class="btn btn-primary">Search</button>
</form>

<table class="table">
    <thead>
        <tr>
            <th>Token</th>
            <th>Username</th>
            <th>Last Activity</th>
            <th>Friends</th>
            <th>Requests</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var player in Model)
        {
            <tr>
                <td><a asp-action="Profile" asp-route-token="@player.Token" style="text-decoration: none; color: inherit;">@player.Token</a></td>
                <td><a asp-action="Profile" asp-route-token="@player.Token" style="text-decoration: none; color: inherit;">@player.Username</a></td>
                <td>@player.LastActivity</td>
                <td>
                    @if (player.Friends.Count > 0)
                    {
                        @foreach (var friend in player.Friends)
                        {
                            <a asp-action="Profile" asp-route-token="@friend" style="text-decoration: none; color: inherit;">
                                @friend
                            </a>

                            @(friend != player.Friends.Last() ? ", " : "")
                        }
                    }
                    else
                    {
                        <span>empty</span>
                    }
                </td>
                <td>
                    @if (player.Requests.Count > 0)
                    {
                        @foreach (var request in player.Requests)
                        {
                            <a asp-action="Profile" asp-route-token="@request.Username" style="text-decoration: none; color: inherit;">
                                @request.Username
                            </a>

                            @(request != player.Requests.Last() ? ", " : "")
                        }
                    }
                    else
                    {
                        <span>empty</span>
                    }
                </td>
                <td>
                    <button type="submit" class="btn btn-link p-0" onclick="suspendPlayer('@player.Token')" title="Suspend Player" style="cursor: pointer;">
                        <i class="fas fa-lock" style="font-size: 18px; color: red;" onmouseover="this.style.color='#cc0000'" onmouseout="this.style.color='red'"></i>
                    </button>

                    <button type="button" class="btn btn-link p-0" onclick="unsuspendPlayer('@player.Token')" title="Unsuspend Player" style="cursor: pointer;">
                        <i class="fas fa-unlock" style="font-size: 18px; color: green;" onmouseover="this.style.color='#006400'" onmouseout="this.style.color='green'"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    function suspendPlayer(token) {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("SuspendPlayer", "Mod")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ body: token })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function unsuspendPlayer(token) {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("UnsuspendPlayer", "Mod")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ body: token })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
    }
</script>