@model MVC.Models.Home

@{
    ViewData["Title"] = "Home Page";
}
@Html.AntiForgeryToken()

@if (User is not null && User.Identity is not null && User.Identity.IsAuthenticated)
{
    <div class="text-center" style="font-size: 48px; margin-top: 20px;">
        <h3>@Model.Stats</h3>
    </div>

    <div class="row" style="margin-top: 20px;">
        <!-- Match History -->
        <div class="col-md-3">
            <h3>Match History</h3>
            @if (Model.MatchHistory != null && Model.MatchHistory.Count > 0)
            {
                <div style="height: 200px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px;">
                    <ul style="list-style: none; padding-left: 0;">
                        @foreach (var game in Model.MatchHistory)
                        {
                            <li style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px;
                        background-color: @(game.Draw ? "#fff3cd" : User.Identity.Name == game.Winner ? "#d4edda" : "#f8d7da"); padding: 10px;">

                                @if (game.Draw == false && User.Identity.Name == game.Winner)
                                {
                                    <span>Won</span>
                                }
                                else if (game.Draw == false && User.Identity.Name == game.Loser)
                                {
                                    <span>Lost</span>
                                }
                                else
                                {
                                    <span>Draw</span>
                                }
                                @if (User.Identity.Name == game.Winner)
                                {
                                    <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@game.Loser" style="text-decoration: none; color: inherit;">@game.Loser</a></span>
                                }
                                else if (User.Identity.Name == game.Loser)
                                {
                                    <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@game.Winner" style="text-decoration: none; color: inherit;">@game.Winner</a></span>
                                }
                                else
                                {
                                    <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@game.Draw" style="text-decoration: none; color: inherit;">@game.Draw</a></span>
                                }
                                <span><a asp-controller="Home" asp-action="Result" asp-route-token="@(User.Identity.Name == game.Winner ? game.Winner : game.Loser) @game.Token" style="text-decoration: none; color: inherit;">@game.Date.ToString("dd/MM/yyyy")</a></span>
                            </li>
                        }
                    </ul>
                </div>
            }
            else
            {
                <p>You have no match history.</p>
            }
        </div>

        <!-- Online Players -->
        <div class="col-md-3">
            <h3>Online</h3>
            <div id="online-players-container" style="height: 200px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px;">
                @if (Model.Partial.Online != null && Model.Partial.Online.Count > 0)
                {
                    <ul style="list-style: none; padding-left: 0;">
                        @foreach (var player in Model.Partial.OnlinePlayers)
                        {
                            <li style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px; background-color:lightblue">
                                <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@player" style="text-decoration: none; color: inherit;">@player</a></span>
                                <div>
                                    @if (!Model.Partial.Pending.InGame && Model.Partial.JoinablePlayers.Contains(player))
                                    {
                                        <button type="submit" class="btn btn-link p-0" style="font-size: 16px; line-height: 1;" title="Join Game" onclick="joinGame('@player')">
                                            <i class="fa fa-link" style="font-size: 18px;"></i>
                                        </button>
                                    }

                                    @if (Model.Partial.Pending.InGame && Model.Partial.Pending.Status == "0" &&
                                   !Model.Partial.SentGameRequests.Contains(player) && Model.Partial.InvitablePlayers.Contains(player))
                                    {
                                        <button type="submit" class="btn btn-link p-0" style="font-size: 16px; line-height: 1;" title="Invite" onclick="sendGameRequest('@player')">
                                            <i class="fa fa-envelope" style="font-size: 18px;"></i>
                                        </button>
                                    }

                                    @if (!Model.Partial.SentFriendRequests.Contains(player) && !Model.Partial.FriendRequests.Contains(player))
                                    {
                                        <button type="submit" class="btn btn-link p-0" style="font-size: 16px; margin-left: 5px;" title="Friend request" onclick="sendFriendRequest('@player')">
                                            <i class="fas fa-plus-circle" style="font-size: 18px;"></i>
                                        </button>
                                    }
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>No players online.</p>
                }
            </div>
        </div>

        <!-- Friends -->
        <div class="col-md-3">
            <h3>Friends</h3>
            <div id="friends-container" style="height: 200px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px;">
                @if (Model.Partial.OnlineFriends != null && Model.Partial.OnlineFriends.Count > 0)
                {
                    <span><strong>Online:</strong></span>
                    <ul style="list-style: none; padding-left: 0;">
                        @foreach (var player in Model.Partial.OnlineFriends)
                        {
                            <li style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px; background-color:lightgreen">
                                <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@player" style="text-decoration: none; color: inherit;">@player</a></span>
                                <div>
                                    @if (!Model.Partial.Pending.InGame && Model.Partial.JoinablePlayers.Contains(player))
                                    {
                                        <button type="submit" class="btn btn-link p-0" style="font-size: 16px; line-height: 1;" title="Join Game" onclick="joinGame('@player')">
                                            <i class="fa fa-link" style="font-size: 18px;"></i>
                                        </button>
                                    }

                                    @if (Model.Partial.Pending.InGame && Model.Partial.Pending.Status == "0" &&
                                   !Model.Partial.SentGameRequests.Contains(player) && Model.Partial.InvitablePlayers.Contains(player))
                                    {
                                        <button type="submit" class="btn btn-link p-0" style="font-size: 16px; line-height: 1;" title="Invite" onclick="sendGameRequest('@player')">
                                            <i class="fa fa-envelope" style="font-size: 18px;"></i>
                                        </button>
                                    }


                                    <button type="submit" class="btn btn-link p-0" style="font-size: 16px; line-height: 1;" title="Remove friend" onclick="deleteFriend('@player')">
                                        <i class="fas fa-trash-alt" style="font-size: 18px; color: orangered;"></i>
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                }
                @if (Model.Partial.OfflineFriends != null && Model.Partial.OfflineFriends.Count > 0)
                {
                    <span><strong>Offline:</strong></span>
                    <ul style="list-style: none; padding-left: 0;">
                        @foreach (var player in Model.Partial.OfflineFriends)
                        {
                            <li style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px; background-color:lightgray">
                                <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@player" style="text-decoration: none; color: inherit;">@player</a></span>
                                <div>
                                    <button type="submit" class="btn btn-link p-0" style="font-size: 16px; line-height: 1;" title="Remove friend" onclick="deleteFriend('@player')">
                                        <i class="fas fa-trash-alt" style="font-size: 18px; color: orangered;"></i>
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                }
                @if (Model.Partial.FriendRequests != null && Model.Partial.FriendRequests.Count > 0)
                {
                    <span>
                        <strong>Request:</strong>
                    </span>
                    <ul style="list-style: none; padding-left: 0;">
                        @foreach (var player in Model.Partial.FriendRequests)
                        {
                            <li style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px; background-color:lightgoldenrodyellow">
                                <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@player" style="text-decoration: none; color: inherit;">@player</a></span>
                                <div>
                                    <button type="submit" class="btn btn-link p-0" style="font-size: 16px; margin-right: 5px;" title="Accept request" onclick="acceptFriendRequest('@player')">
                                        <i class="fas fa-check-circle" style="font-size: 18px; color: forestgreen;"></i>
                                    </button>
                                    <button type="submit" class="btn btn-link p-0" style="font-size: 16px;" title="Decline request" onclick="declineFriendRequest('@player')">
                                        <i class="fas fa-times-circle" style="font-size: 18px; color: orangered;"></i>
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                }
                @if (Model.Partial.OnlineFriends != null && Model.Partial.OnlineFriends.Count <= 0 &&
               Model.Partial.OfflineFriends != null && Model.Partial.OfflineFriends.Count <= 0 &&
               Model.Partial.FriendRequests != null && Model.Partial.FriendRequests.Count <= 0)
                {
                    <p>You have no friends added.</p>
                }
            </div>
        </div>

        <!-- Requests -->
        <div class="col-md-3">
            <h3>Game Requests</h3>
            <div id="game-requests-container" style="height: 200px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px;">
                @if (!Model.Partial.Pending.InGame && Model.Partial.GameRequests != null && Model.Partial.GameRequests.Count > 0)
                {
                    <span><strong>From:</strong></span>
                    <ul style="list-style: none; padding-left: 0;">
                        @foreach (var player in Model.Partial.GameRequests)
                        {
                            <li style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px; background-color:lightgoldenrodyellow">
                                <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@player" style="text-decoration: none; color: inherit;">@player</a></span>
                                <div>
                                    <button type="submit" class="btn btn-link p-0" style="font-size: 16px; margin-right: 5px;" title="Accept request" onclick="acceptGameRequest('@player')">
                                        <i class="fas fa-check-circle" style="font-size: 18px; color: forestgreen;"></i>
                                    </button>
                                    <button type="submit" class="btn btn-link p-0" style="font-size: 16px;" title="Decline request" onclick="declineGameRequest('@player')">
                                        <i class="fas fa-times-circle" style="font-size: 18px; color: orangered;"></i>
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                }

                @if (Model.Partial.Pending.InGame && Model.Partial.SentGameRequests != null && Model.Partial.SentGameRequests.Count > 0)
                {
                    <span><strong>To:</strong></span>
                    <ul style="list-style: none; padding-left: 0;">
                        @foreach (var player in Model.Partial.SentGameRequests)
                        {
                            <li style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px; background-color:lightgoldenrodyellow">
                                <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@player" style="text-decoration: none; color: inherit;">@player</a></span>
                            </li>
                        }
                    </ul>
                }

                @if (!Model.Partial.Pending.InGame && Model.Partial.GameRequests != null && Model.Partial.GameRequests.Count <= 0)
                {
                    <p>No pending game requests.</p>
                }

                @if (Model.Partial.Pending.InGame && Model.Partial.SentGameRequests != null && Model.Partial.SentGameRequests.Count <= 0)
                {
                    <p>No sent game requests.</p>
                }
            </div>
        </div>
    </div>

    <!-- Pending Games -->
    <div id="pending-games-container">
        @if (!Model.Partial.Pending.InGame && Model.Partial.Pending.Session == "false")
        {
            <div id="pending-title" class="text-center" style="margin-top: 20px;">
                <h3>Pending Games</h3>
            </div>
            <div id="pending-games-section" style="height: 200px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; margin-top: 10px;">
                @if (Model.Partial.Pending != null && Model.Partial.Pending.Games.Count > 0)
                {
                    <ul style="list-style: none; padding-left: 0;">
                        @foreach (var game in Model.Partial.Pending.Games)
                        {
                            @if (game.Username != User.Identity.Name)
                            {
                                <li style="margin-bottom: 10px; background-color:lavender">
                                    <button type="submit" class="btn" style="width: 100%; text-align: left; background-color: transparent; border: none; padding: 10px 15px; cursor: pointer;" onclick="joinGame('@game.Username')">
                                        <div style="display: flex; justify-content: space-between;">
                                            <span style="margin-left: 20px;">@game.Description</span>
                                            <span style="margin-right: 20px"><strong>@game.Username</strong> @game.Stats</span>
                                        </div>
                                    </button>
                                </li>
                            }
                        }
                    </ul>
                }
                else
                {
                    <p>No pending game requests.</p>
                }
            </div>
            <div id="pending-create-button" class="d-flex justify-content-center">
                <form method="post" asp-action="Creation" asp-controller="Home" style="display: inline; margin-top: 10px;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn" style="background-color: lightskyblue; cursor: pointer;">
                        New game
                    </button>
                </form>
            </div>
        }

        @if (Model.Partial.Pending is not null && !Model.Partial.Pending.InGame && Model.Partial.Pending.Session == "true")
        {
            <div id="create-game-section">
                <div class="text-center form-group d-flex justify-content-center" style="margin-top: 20px;">
                    <h3>Description</h3>
                </div>
                <div class="d-flex justify-content-center">
                    <div style="display: flex; flex-direction: column; align-items: center; margin-top: 10px;">
                        <div class="form-group" style="width: 600px; padding: 10px;">
                            <textarea id="descriptionText" name="description" required minlength="20" maxlength="120" style="width: 100%;">I wanna play a game and don't have any requirements!</textarea>
                        </div>
                        <div style="display: flex; gap: 10px;">
                            <button type="submit" class="btn btn-primary" onclick="createGame()">Create</button>
                            <form id="cancelForm" asp-action="Cancel" method="post">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-danger">Cancel</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (Model.Partial.Pending is not null && Model.Partial.Pending.InGame && Model.Partial.Pending.Status == "0")
        {
            <div class="text-center form-group d-flex justify-content-center" style="margin-top: 20px;">
                <h3>Waiting for an Opponent...</h3>
            </div>

            <div id="loading" class="d-flex justify-content-center">
                <img src="~/images/loading.gif" alt="Loading..." style="width:350px; height: auto; margin-top: 10px;" />
            </div>

            <div class="d-flex justify-content-center" style="margin-top: 10px;">
                <p>Waiting for an opponent to join...</p>
            </div>

            <div class="d-flex justify-content-center" style="margin-top: 10px;">
                <button type="submit" class="btn btn-danger" onclick="deleteGame()">Delete</button>
            </div>
        }
        <div id="session-status" data-session="@Model?.Partial.Pending?.Session"></div>
        <div id="game-status" data-status="@Model?.Partial.Pending?.Status"></div>
    </div>

    <script>
        function createGame() {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const description = document.getElementById('descriptionText').value;

            if (description.length < 20 || description.length > 120) {
                alert("Description must be between 20 and 120 characters.");
            }

            fetch('@Url.Action("CreateGame", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ body: description })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.reload();
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function deleteGame() {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("DeleteGame", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.reload();
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function joinGame(username) {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("JoinGame", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ body: username })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = '@Url.Action("Play", "Game")';
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function sendFriendRequest(username) {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("SendFriendRequest", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ body: username })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        refreshContainers()
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function acceptFriendRequest(username) {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("AcceptFriendRequest", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ body: username })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        refreshContainers()
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function declineFriendRequest(username) {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("DeclineFriendRequest", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ body: username })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        refreshContainers()
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function deleteFriend(username) {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("DeleteFriend", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ body: username })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        refreshContainers()
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function sendGameRequest(username) {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("SendGameRequest", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ body: username })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        refreshContainers()
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function acceptGameRequest(username) {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("AcceptGameRequest", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ body: username })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        refreshContainers()
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function declineGameRequest(username) {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("DeclineGameRequest", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ body: username })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        refreshContainers()
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function refreshContainers() {
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const sessionStatus = document.getElementById("session-status").dataset.session;

            const onlinePlayersContainer = document.getElementById("online-players-container");
            const friendsContainer = document.getElementById("friends-container");
            const gameRequestsContainer = document.getElementById("game-requests-container");
            const pendingGamesContainer = document.getElementById("pending-games-container");
            const pendingGamesSection = sessionStatus === "false" ? document.getElementById("pending-games-section") : null;

            const onlinePlayersScrollPosition = onlinePlayersContainer ? onlinePlayersContainer.scrollTop : 0;
            const friendsScrollPosition = friendsContainer ? friendsContainer.scrollTop : 0;
            const gameRequestsScrollPosition = gameRequestsContainer ? gameRequestsContainer.scrollTop : 0;
            const pendingGamesScrollPosition = pendingGamesSection ? pendingGamesSection.scrollTop : 0;

            fetch('@Url.Action("Partial", "Home")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => response.text())
                .then(data => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(data, 'text/html');

                    const gameStatusElement = doc.getElementById("game-status");
                    const gameStatus = gameStatusElement ? gameStatusElement.dataset.status : null;

                    if (gameStatus === "1") {
                        window.location.href = '/Game/Play';
                    }

                    function updateIfDifferent(container, newContent, scrollPosition) {
                        if (container && newContent && container.innerHTML !== newContent.innerHTML) {
                            container.innerHTML = newContent.innerHTML;

                            if (scrollPosition != null) {
                                requestAnimationFrame(() => {
                                    container.scrollTop = scrollPosition;
                                });
                            }
                        }
                    }

                    updateIfDifferent(onlinePlayersContainer, doc.getElementById("online-players-container"), onlinePlayersScrollPosition);
                    updateIfDifferent(friendsContainer, doc.getElementById("friends-container"), friendsScrollPosition);
                    updateIfDifferent(gameRequestsContainer, doc.getElementById("game-requests-container"), gameRequestsScrollPosition);
                    updateIfDifferent(pendingGamesContainer, doc.getElementById("pending-games-container"), null);
                    updateIfDifferent(pendingGamesSection, doc.getElementById("pending-games-section"), pendingGamesScrollPosition);
                })
                .catch(error => console.error('Error:', error));
        }
        setInterval(refreshContainers, 5000);
    </script>
}
else
{
    <div class="text-center">
        <h1 class="display-4">Welcome</h1>
        <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    </div>
}