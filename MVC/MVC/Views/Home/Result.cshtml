@model GameOverview

<div class="d-flex justify-content-center">
    <h3 style="background-color: @(Model.Result.Draw ? "#fff3cd" : Model.Username == Model.Result.Winner ? "#d4edda" : "#f8d7da"); padding: 10px;">
        @if (Model.Result.Draw == false && Model.Result.Winner == Model.Username)
        {
            <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@Model.Result.Loser" style="text-decoration: none; color: inherit;">@Model.Result.Winner won against @Model.Result.Loser</a></span>
        }
        else if (Model.Result.Draw == false && Model.Result.Loser == Model.Username)
        {
            <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@Model.Result.Winner" style="text-decoration: none; color: inherit;">@Model.Result.Loser lost against @Model.Result.Winner</a></span>
        }
        else if (Model.Result.Draw && Model.Result.Winner == Model.Username)
        {
            <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@Model.Result.Loser" style="text-decoration: none; color: inherit;">@Model.Result.Winner drew with @Model.Result.Loser</a></span>
        }
        else
        {
            <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@Model.Result.Winner" style="text-decoration: none; color: inherit;">@Model.Result.Loser drew with @Model.Result.Winner</a></span>
        }
        <span>@Model.Result.Date.ToString("dd/MM/yyyy HH:mm tt")</span>
    </h3>
</div>

<div class="d-flex justify-content-center" style="margin-top: 10px; gap: 20px;">
    <p>
        <span class="player-color-indicator"
              style="background-color: #FFFFFF;
                     color: #000000;
                     padding: 5px 10px;
                     border-radius: 5px;
                     border: 1px solid #ddd;
                     box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                     display: inline-block;">
            <strong><span id="white-score">0</span></strong>
        </span>
    </p>
    <p>
        <span class="player-color-indicator"
              style="background-color: #000000;
                     color: #FFFFFF;
                     padding: 5px 10px;
                     border-radius: 5px;
                     border: 1px solid #ddd;
                     box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                     display: inline-block;">
            <strong><span id="black-score">0</span></strong>
        </span>
    </p>
</div>

<div id="board-container" class="d-flex justify-content-center">
    <table class="table table-bordered" style="width: auto; margin-top: 20px">
        @for (int row = 0; row < Model?.Result.Board.GetLength(0); row++)
        {
            <tr>
                @for (int col = 0; col < Model.Result.Board.GetLength(1); col++)
                {
                    var cell = Model.Result.Board[row, col];
                    var cellDisplay = cell == Color.None ? "" : cell.ToString();
                    var pieceClass = cell == Color.White ? "white-piece" : cell == Color.Black ? "black-piece" : "";
                    <td style="width: 50px; height: 50px; text-align: center; background-color:@((row + col) % 2 == 0 ? "lawngreen" : "limegreen");">
                        @if (cell != Color.None)
                        {
                            <i class="fa fa-circle @pieceClass" style="font-size: 30px; color: @(cell.ToString());"></i>
                        }
                    </td>
                }
            </tr>
        }
    </table>
</div>

<div class="d-flex justify-content-center" style="margin-top: 10px;">
    @if (Model != null && Model.Rematch)
    {
        <div id="game-rematch-container" class="d-flex flex-column align-items-center justify-content-center" style="text-align: center;">
            @if (!string.IsNullOrEmpty(Model.Request))
            {
                <div class="text-center mb-2">
                    <span><strong>Rematch requested</strong></span>
                </div>

                <div class="d-flex align-items-center justify-content-center" style="gap: 15px;">
                    <button type="submit" class="btn btn-success" style="font-size: 20px; margin-right: 5px; line-height: 1;" title="Accept request" onclick="acceptGameRequest('@Model.Request')">
                        <i class="fas fa-check-circle" style="font-size: 24px;"></i>
                    </button>
                    <button type="submit" class="btn btn-danger" style="font-size: 20px; line-height: 1;" title="Decline request" onclick="declineGameRequest('@Model.Request')">
                        <i class="fas fa-times-circle" style="font-size: 24px;"></i>
                    </button>
                </div>
            }
        </div>
        <div id="rematch-button-container">
            <button type="submit" class="btn btn-primary" title="Rematch" style="font-size: 24px;" onclick="createGame('@(Model.Result.Winner == Model.Username ? Model.Result.Loser : Model.Result.Winner)')">
                <i class="fas fa-redo"></i>Rematch
            </button>
        </div>
    }
    else
    {
        <a href="javascript:history.back()" class="btn btn-link" title="Go back" style="font-size: 24px; color: black;">
            <i class="fas fa-arrow-left"></i> Back
        </a>
    }
</div>

<script>
    function calculateScores() {
        let whiteScore = 0;
        let blackScore = 0;

        const boardCells = document.querySelectorAll("#board-container td");

        boardCells.forEach(cell => {
            const piece = cell.querySelector("i");

            if (piece) {
                if (piece.classList.contains("white-piece")) {
                    whiteScore++;
                } else if (piece.classList.contains("black-piece")) {
                    blackScore++;
                }
            }
        });
        document.getElementById("white-score").textContent = whiteScore;
        document.getElementById("black-score").textContent = blackScore;
    }
    window.onload = calculateScores;

    function createGame(username) {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("RematchGame", "Home")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ body: username })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/Home/Index';
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function acceptGameRequest(username) {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("AcceptGameRequest", "Home")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ body: username })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/Game/Play';
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function declineGameRequest(username) {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("DeclineGameRequest", "Home")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ body: username })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    refreshRematch()
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function refreshRematch() {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
        const gameRematchContainer = document.getElementById("game-rematch-container");
        const rematchButtonContainer = document.getElementById("rematch-button-container");

        fetch('@Url.Action("Rematch", "Home")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ body: '@(Model != null && Model.Result.Winner == Model.Username ? Model.Result.Loser : Model?.Result.Winner)' })
        })
            .then(response => response.text())
            .then(data => {
                gameRematchContainer.innerHTML = data;

                if (gameRematchContainer.innerHTML.includes("Rematch requested")) {
                    rematchButtonContainer.style.display = "none";
                } else {
                    rematchButtonContainer.style.display = "block";
                }
            })
            .catch(error => console.error('Error:', error));
    }
    setInterval(refreshRematch, 1000);
</script>