@model MVC.Models.HomeProfile

<div class="d-flex justify-content-center" style="font-size: 48px; margin-top: 20px;">
    <h2>
        @Model.Username

        @if (!Model.HasSentRequest && !Model.IsFriend && !Model.HasPendingRequest)
        {
            <button type="submit" class="btn btn-link p-0" style="font-size: 16px; margin-left: 5px;" title="Friend request" onclick="sendFriendRequest('@Model.Username')">
                <i class="fas fa-plus-circle" style="font-size: 18px;"></i>
            </button>
        }
        else if (Model.IsFriend)
        {
            <button type="submit" class="btn btn-link p-0" style="font-size: 16px; line-height: 1;" title="Remove friend" onclick="deleteFriend('@Model.Username')">
                <i class="fas fa-trash-alt" style="font-size: 18px; color: red;"></i>
            </button>
        }
    </h2>
</div>

<div class="text-center">
    <h3>@Model.Stats</h3>
</div>

<div class="d-flex justify-content-center">
    <div class="text-center" style="margin-top: 20px;">
        @if (Model.HasPendingRequest)
        {
            <button type="submit" class="btn btn-success" style="font-size: 16px; line-height: 1;" title="Accept request" onclick="acceptFriendRequest('@Model.Username')">
                <i class="fas fa-check-circle" style="font-size: 24px;"></i>
            </button>

            <button type="submit" class="btn btn-danger" style="font-size: 16px; line-height: 1;" title="Decline request" onclick="declineFriendRequest('@Model.Username')">
                <i class="fas fa-times-circle" style="font-size: 24px;"></i>
            </button>
        }
    </div>
</div>
<div class="text-center" style="font-size: 48px; margin-top: 20px;">
    <h3>Match History</h3>
</div>
@if (Model.MatchHistory != null && Model.MatchHistory.Count > 0 && User is not null && User.Identity is not null)
{
    <div class="d-flex justify-content-center">
        <div class="col-md-6" style="height: 200px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px;">
            <ul style="list-style: none; padding-left: 0;">
                @foreach (var game in Model.MatchHistory)
                {
                    <li style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px;
                        background-color: @(game.Draw ? "#fff3cd" : Model.Username == game.Winner ? "#d4edda" : "#f8d7da"); padding: 10px;">
                        @if (game.Draw == false && game.Winner == Model.Username)
                        {
                            <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@game.Loser" style="text-decoration: none; color: inherit;">@game.Winner Won against @game.Loser</a></span>
                        }
                        else if (game.Draw == false && game.Loser == Model.Username)
                        {
                            <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@game.Winner" style="text-decoration: none; color: inherit;">@game.Loser Lost against @game.Winner</a></span>
                        }
                        else if (game.Draw && game.Winner == Model.Username)
                        {
                            <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@game.Loser" style="text-decoration: none; color: inherit;">@game.Winner Drew with @game.Loser</a></span>
                        }
                        else
                        {
                            <span><a asp-controller="Home" asp-action="Profile" asp-route-username="@game.Winner" style="text-decoration: none; color: inherit;">@game.Loser Drew with @game.Winner</a></span>
                        }
                        <span>@game.Date.ToString("dd/MM/yyyy hh:mm tt")</span>
                    </li>
                }
            </ul>
        </div>
    </div>
}
else
{
    <p class="text-center">No match history available.</p>
}

<div class="d-flex justify-content-center">
    <a href="javascript:history.back()" class="btn btn-link" title="Go back" style="font-size: 24px; color: black;">
        <i class="fas fa-arrow-left"></i> Back
    </a>
</div>

<script>
    function sendFriendRequest(username) {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("SendFriendRequest", "Home")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ body: username })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function acceptFriendRequest(username) {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("AcceptFriendRequest", "Home")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ body: username })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function declineFriendRequest(username) {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("DeclineFriendRequest", "Home")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ body: username })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function deleteFriend(username) {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("DeleteFriend", "Home")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ body: username })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
    }
</script>
