@model MVC.Models.GamePlay
@Html.AntiForgeryToken()

<div class="d-flex justify-content-center" style="margin-top: 20px;">
    <h2>Playing against <span style="font-weight: bold; color: #007bff;">@Model.Opponent</span></h2>
</div>

<div class="d-flex justify-content-center" style="margin-top: 15px; gap: 20px;">
    <p>
        <span class="player-color-indicator"
              style="background-color: @(Model.Color == Color.White ? "#FFFFFF" : "#000000");
                 color: @(Model.Color == Color.White ? "#000000" : "#FFFFFF");
                 padding: 5px 10px;
                 border-radius: 5px;
                 border: 1px solid #ddd;
                 box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                 display: inline-block;">
            <strong><span id="@(Model.Color == Color.White ? "white-score" : "black-score")">0</span></strong>
        </span>
    </p>
    <p>
        <span class="player-color-indicator"
              style="background-color: @(Model.Color == Color.White ? "#000000" : "#FFFFFF");
                 color: @(Model.Color == Color.White ? "#FFFFFF" : "#000000");
                 padding: 5px 10px;
                 border-radius: 5px;
                 border: 1px solid #ddd;
                 box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                 display: inline-block;">
            <strong><span id="@(Model.Color == Color.White ? "black-score" : "white-score")">0</span></strong>
        </span>
    </p>
</div>

<div id="board-container" class="d-flex justify-content-center">
    <table class="table table-bordered" style="width: auto;">
        @for (int row = 0; row < Model?.Partial.Board.GetLength(0); row++)
        {
            <tr>
                @for (int col = 0; col < Model.Partial.Board.GetLength(1); col++)
                {
                    var cell = Model.Partial.Board[row, col];
                    var cellDisplay = cell == Color.None ? "" : cell.ToString();
                    var pieceClass = cell == Color.White ? "white-piece" : cell == Color.Black ? "black-piece" : "";
                    <td style="width: 50px; height: 50px; text-align: center; background-color:@((row + col) % 2 == 0 ? "lawngreen" : "limegreen");"
                        data-row="@row"
                        data-col="@col"
                        onclick="cellClicked(this)">
                        @if (cell != Color.None)
                        {
                            <i class="fa fa-circle @pieceClass" style="font-size: 30px; color: @(cell.ToString());"></i>
                        }
                    </td>
                }
            </tr>
        }
    </table>
    <div id="game-status" data-status="@Model?.Partial.InGame"></div>
</div>

<div id="players-turn-container" class="d-flex justify-content-center">
    <div class="d-flex justify-content-center" style="margin-top: 10px;">
        <p>
            <span class="player-color-indicator"
                  style="background-color: @(Model != null && Model.Partial.IsPlayersTurn ? "lightgreen" : "lightcoral");
                     color: @(Model != null && Model.Partial.IsPlayersTurn ? "#006400" : "#8B0000");
                     padding: 5px 10px;
                     border-radius: 5px;
                     border: 1px solid #ddd;
                     box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                     display: inline-block;">
                <strong>@(Model != null && Model.Partial.IsPlayersTurn ? "Make your move within" : "Wait on opponent's move for")</strong>
                <span class="player-color-indicator"
                      style="background-color: @(Model != null && Model.Partial.PlayersTurn == Color.White ? "#FFFFFF" : "#000000");
                         color: @(Model != null && Model.Partial.PlayersTurn == Color.White ? "#000000" : "#FFFFFF");
                         padding: 5px 10px;
                         border-radius: 5px;
                         border: 1px solid #ddd;
                         box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                         display: inline-block;">
                    @Model?.Partial.Time sec
                </span>
            </span>
        </p>
    </div>
</div>

<div id="buttons-container" class="d-flex justify-content-center">
    @if (Model is not null && Model.Partial.IsPlayersTurn)
    {
        <div style="display: flex; flex-direction: column; align-items: center;">
            <div style="display: flex; gap: 10px;">
                @if (!Model.Partial.PossibleMove)
                {
                    <button type="button" class="btn btn-primary" onclick="passGame()">Pass</button>
                }
                <button type="button" class="btn btn-danger" onclick="forfeitGame()">Forfeit</button>
            </div>
        </div>
    }
</div>

<script>
    let cellSelected = null;

    function cellClicked(cell) {
        const row = cell.getAttribute('data-row');
        const col = cell.getAttribute('data-col');

        cellSelected = {
            row: parseInt(row),
            col: parseInt(col),
            element: cell
        };
        cell.style.border = '2px solid red';

        sendMove(cellSelected.row, cellSelected.col);
        selectedCell = null;
    }

    function sendMove(row, col) {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        const moveData = {
            Row: row,
            Column: col
        };

        fetch('@Url.Action("Move", "Game")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(moveData)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    refreshContainers();
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function passGame() {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("Pass", "Game")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => {
                if (response.ok) {
                    refreshContainers();
                } else {
                    alert('Unable to pass');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function forfeitGame() {
        if (!confirm("Are you sure you want to forfeit the game?")) {
            return;
        }

        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('@Url.Action("Forfeit", "Game")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => {
                if (response.ok) {
                    window.location.href = '@Url.Action("Result", "Home")';
                } else {
                    alert('Unable to forfeit');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function calculateScores() {
        let whiteScore = 0;
        let blackScore = 0;

        const boardCells = document.querySelectorAll("#board-container td");

        boardCells.forEach(cell => {
            const piece = cell.querySelector("i");

            if (piece) {
                if (piece.classList.contains("white-piece")) {
                    whiteScore++;
                } else if (piece.classList.contains("black-piece")) {
                    blackScore++;
                }
            }
        });

        document.getElementById("white-score").textContent = whiteScore;
        document.getElementById("black-score").textContent = blackScore;
    }

    function refreshContainers() {
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        const playersTurnContainer = document.getElementById("players-turn-container");
        const boardContainer = document.getElementById("board-container");
        const buttonsContainer = document.getElementById("buttons-container");

        fetch('@Url.Action("Partial", "Game")', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': antiForgeryToken,
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => response.text())
            .then(data => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(data, 'text/html');

                const gameStatusElement = doc.getElementById("game-status");
                const gameStatus = gameStatusElement ? gameStatusElement.dataset.status : null;

                if (gameStatus === "False") {
                    window.location.href = '@Url.Action("Result", "Home")';
                }

                const playersTurnContent = doc.getElementById("players-turn-container");
                if (playersTurnContent && playersTurnContainer) {
                    playersTurnContainer.innerHTML = playersTurnContent.innerHTML;
                }

                const boardContent = doc.getElementById("board-container");
                if (boardContent && boardContainer) {
                    boardContainer.innerHTML = boardContent.innerHTML;
                    calculateScores();
                }

                const buttonsContent = doc.getElementById("buttons-container");
                if (buttonsContent && buttonsContainer) {
                    buttonsContainer.innerHTML = buttonsContent.innerHTML;
                }
            })
            .catch(error => console.error('Error:', error));
    }
    setInterval(refreshContainers, 1000);
</script>